"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import logging.config
import environ
import mongoengine
import os
from rest_framework.authentication import SessionAuthentication
from rest_framework.authentication import BasicAuthentication
from rest_framework.authentication import TokenAuthentication

# Build paths inside the project like this: BASE_DIR / 'subdir'. / 'backend'
BASE_DIR = Path(__file__).resolve().parent.parent

def get_project_root():
    """
    상위 디렉토리를 탐색하여 'shared' 폴더가 있는 루트를 반환.
    찾지 못하면 에러 발생.
    """
    current_dir = BASE_DIR
    while current_dir != current_dir.parent:  # 최상위 디렉토리(/)까지 탐색
        if (current_dir / "shared").exists():
            return current_dir
        current_dir = current_dir.parent
    
    # 최상위까지 갔는데도 없으면 에러
    raise FileNotFoundError("프로젝트 루트에서 'shared' 폴더를 찾을 수 없습니다.")

# 루트 설정, 루트 가변적
VARIABLE_ROOT = get_project_root()

# /shared/aimodels 경로 설정
SHARED_AIMODELS = VARIABLE_ROOT / "shared" / "aimodels"
SHARED = VARIABLE_ROOT / "shared"

# 경로가 존재하는지 확인
if not SHARED_AIMODELS.exists():
    raise FileNotFoundError(f"'shared/aimodels' 폴더를 찾을 수 없습니다: {SHARED_AIMODELS}")

# root_dir 설정 (cowaiplatform 폴더로)
cowaiplatform = BASE_DIR.parent

# environ을 사용하여 .env 파일 로드
env = environ.Env()
env_path = (cowaiplatform / ".env") if (cowaiplatform / ".env").exists() else (BASE_DIR / ".env")
if env_path.exists():
    env.read_env(env_path)
else:
    print("⚠️ 환경 변수 파일(.env)을 찾을 수 없습니다.")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY='django-insecure-8&m9+wdcw0^989x5hfii67osmuxo9m1fk56u87u#o-qhsrv!^7'
SECRET_KEY = env('SECRET_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = env('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = env('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False)

ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['localhost', '127.0.0.1'])

# 로그 관련 설정
LOG_LEVEL = env('LOG_LEVEL', default='INFO')
LOG_FILE_PATH = env('LOG_FILE_PATH', default=str(cowaiplatform / 'log' / 'myapp.log'))

# 로그 디렉토리가 없다면 생성
log_dir = os.path.dirname(LOG_FILE_PATH)
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

# LOGGING 설정 (예시)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': LOG_FILE_PATH,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': LOG_LEVEL,
            'propagate': True,
        },
    },
}

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'tools.custom_exception_handler.custom_exception_handler',
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',  # 세션 인증 사용
        'rest_framework.authentication.BasicAuthentication',  # 기본 인증 사용        
        'rest_framework.authentication.TokenAuthentication',  # 토큰 인증 사용        
    ],
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'debug_toolbar',
    'corsheaders',
    'drf_yasg',
    'drf_spectacular',
    'rest_framework',
    'accounts',
    'api',
    'services_ai',
    'social_django',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',

]

AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'social_core.backends.naver.NaverOAuth2',
    'django.contrib.auth.backends.ModelBackend',  # Django의 기본 인증 백엔드
)

LOGIN_REDIRECT_URL = '/'
# redirect URI 설정 (이것은 클라이언트에서 받는 토큰으로 백엔드 인증을 처리하는 로직)
SOCIAL_AUTH_GOOGLE_OAUTH2_REDIRECT_URI = 'http://localhost:3000/api/auth/google/callback/'

SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

# 디버그 툴바가 동작할 IP 설정 (로컬호스트 기본값)
INTERNAL_IPS = [
    '127.0.0.1',
]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React 서버 주소
    "http://127.0.0.1:5500",  # VS Code Live Server 기본 포트
    "http://localhost:5500",
]

# 개발 중에만 사용 (프로덕션에서는 사용하지 마세요!)
#CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# postgresql
DATABASES = {
    'default': env.db('POSTGRES_URI')
}

# MongoDB 연결 설정 mongoengine 을 이용한
mongoengine.connect(
    db=env('MONGO_DB_NAME'),  
    host=env('MONGODB_URI'),
    alias='default'
)

# DATABASES = {
#     'default': {
#         'ENGINE': 'mongoengine.django.mongodb',
#         'NAME': env('MONGO_DB_NAME'),
#         'CLIENT': {
#             'host': env('MONGO_URI'),
#         },
#         'ENFORCE_SCHEMA': True,
#     }
# }

# redis CACHE 설정 (Redis 예시)
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': env('REDIS_URI'),  # Load from .env file
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'cowai',
#         'USER': 'admin',
#         'PASSWORD': '1',
#         'HOST': '172.30.1.92',
#         'PORT': '5432',
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# static과 media 폴더가 없으면 생성하도록 설정
static_dir = BASE_DIR / 'static'
media_dir = BASE_DIR / 'media'

# static 폴더가 없으면 생성
if not static_dir.exists():
    os.makedirs(static_dir)

# media 폴더가 없으면 생성
if not media_dir.exists():
    os.makedirs(media_dir)

# 기본 설정 : 개발 서버에서 정적 파일을 제공할 때 사용할 URL 경로
STATIC_URL = '/static/'

# 개발 환경에서 추가적으로 정적 파일을 찾을 디렉토리들
STATICFILES_DIRS = [
    BASE_DIR / "static",  # 장고 프로젝트 루트의 'static' 폴더
    BASE_DIR / "media",  # 장고 프로젝트 루트의 'media' 폴더
#    BASE_DIR / "app1/static",  # app1의 'static' 폴더 (예시)
#    BASE_DIR / "nonowhere/nonowhere",  # nonowhere의 'nonowhere' 폴더 (예시) 이름이 달라도 되긴 하다
]

# collectstatic을 통해 정적 파일들이 모일 폴더
STATIC_ROOT = BASE_DIR / "staticfiles"  # 배포 시 이곳에 모입니다.

# 미디어 파일을 저장할 경로
MEDIA_ROOT = BASE_DIR / "media"  # 프로젝트 디렉토리 내 'media' 폴더에 저장

# 미디어 파일을 제공할 URL 경로
MEDIA_URL = '/media/'  # 웹에서 '/media/' 경로로 미디어 파일에 접근 가능

"""사용자가 프로필 사진을 업로드한다고 가정했을 때, 모델에서 이를 어떻게 처리할지 정의합니다.
python
복사
편집
from django.db import models

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    profile_picture = models.ImageField(upload_to='profile_pics/')  # 'media/profile_pics/'"""

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
